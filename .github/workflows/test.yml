on:
  pull_request:
    branches:
      - master
    types: [opened, synchronize]

name: Edit commnet to match merging commits

jobs:
  edit-comment:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/github-script@v7
      name: get-pull-description
      id: get-pull-description
      with:
        script: |
          const pullp = {
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.payload.pull_request.number,
          }
          const { data: pull } = await github.rest.pulls.get(pullp)
          core.setOutput('description', pull.body)

    - if: github.event.action == 'opened'
      uses: actions/github-script@v7
      env:
        description: ${{ steps.get-pull-description.outputs.description }}
      with:
        script: |
          const pullp = {
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.payload.pull_request.number,
          }
          const description = process.env.description
          const { data: commits } = await github.rest.pulls.listCommits(pullp)
          const processedCommits = commits.map(c => {
            const msg = c.commit.message
            if(msg.startsWith('Merge pull request #')) {
              const firstline = msg.split('\n')[0]
              const otherlines = msg.split('\n').slice(1)
              return [...otherlines, firstline].join('\n')
            } else {
              return msg
            }
          })
          const params = {
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.payload.pull_request.number,
            body: description + '\n\nCommits: \n' + processedCommits.join('\n'),
          }
          github.rest.pulls.update(params)

    - if: github.event.action == 'synchronize'
      uses: actions/github-script@v7
      env:
        description: ${{ steps.get-pull-description.outputs.description }}
      with:
        script: |
          const pullp = {
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.payload.pull_request.number,
          }
          const description = process.env.description
          const { data: commits } = await github.rest.pulls.listCommits(pullp)
          const filterdCommits = []
          let adding = false
          for (const commit of commits) {
            if (adding) {
              filterdCommits.push(commit)
            }
            if (commit.sha === context.payload.before) {
              adding = true
            }
          }
          const processedCommits = filterdCommits.map(c => {
            const msg = c.commit.message
            if(msg.startsWith('Merge pull request #')) {
              const firstline = msg.split('\n')[0]
              const otherlines = msg.split('\n').slice(1)
              return [...otherlines, firstline].join('\n')
            } else {
              return msg
            }
          })
          const params = {
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.payload.pull_request.number,
            body: description + '\n' + processedCommits.join('\n'),
          }
          github.rest.pulls.update(params)
